class MyCircularQueue:
    def __init__(self, k: int):
        self.q=[None]*k
        self.maxLen=k
        self.front=0
        self.rear=0

    def enQueue(self, value: int) -> bool:
        if self.q[self.rear] is None:
            self.q[self.rear]=value
            self.rear=(self.rear+1)%self.maxLen
            return True
        else:
            return False

    def deQueue(self) -> bool:
        if self.q[self.front] is None:
            return False
        else:
            self.q[self.front]=None
            self.front=(self.front+1)%self.maxLen
            return True

    def Front(self) -> int:
        if self.q[self.front] is None:
            return -1
        else:
            return self.q[self.front]

    def Rear(self) -> int:
        if self.q[self.rear-1] is None:
            return -1
        else:
            return self.q[self.rear-1]

    def isEmpty(self) -> bool:
        if self.front==self.rear and self.q[self.front] is None:
            return True
        else:
            return False
    def isFull(self) -> bool:
        if self.front==self.rear and self.q[self.front] is not None:
            return True
        else:
            return False