import heapq
import math

class Solution:
    def kClosest(self, points: [[int]], k: int) -> [[int]]:
        '''
        k번 추출이니까 거리만 계산해서 정렬하면 어느 계산값이 어느 포인트의 결과인지
        모르니까 우선순위큐 사용해서 계산값과 X,Y 좌표를 같이 넣어 POP하면 제일 작은
        수가 나오기 때문에 K번만큼 꺼내면 됨
        '''
        heap=[] #heapq 모듈 호출할때 마다 리스트 인자로 넘겨야함

        for x,y in points:
            dist=math.sqrt((x**2)+(y**2)) #유클리드 거리 계산식
            heapq.heappush(heap,(dist,x,y)) #첫 인자는 원소 추가할 대상 리스트,
                                            #두번째 인자는 추가할 원소
        result=[]

        for _ in range(k):
            (dist,x,y)=heapq.heappop(heap) #heappop은 제일 작은 원소 꺼냄
            result.append((x,y))
        return result

if __name__=="__main__":
    s=Solution()
    print(s.kClosest(points = [[1,3],[-2,2]], k = 1))
    print(s.kClosest(points = [[3,3],[5,-1],[-2,4]], k = 2))